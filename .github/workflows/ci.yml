name: CI

on:
  schedule:
    - cron: "0 6 * * 3"
  workflow_dispatch:
    inputs:
      sync:
        description: "Disable sync"
        required: false
        type: boolean
      target:
        description: "Target"
        required: false

env:
  CARGO_TERM_COLOR: always

jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    if: inputs.sync != true
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: Sync
        env:
          upstream_repo: geph-official/geph4-client
        run: |
          # git config user.name github-actions[bot]
          # git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git remote add upstream https://github.com/$upstream_repo.git
          git fetch upstream
          hash=$(git log --all --pretty=format:'%H' -n 1)
          git reset --hard $hash
          # git tag --contains $hash
          git push
          git push --tags

  build-windows:
    name: build-windows-${{ matrix.target }}
    runs-on: windows-latest
    if: ${{ inputs.target == matrix.target ||
      inputs.target == null }}
    strategy:
      matrix:
        target:
          - i686-pc-windows-msvc
          - i686-pc-windows-gnu
        # include:
        #   - target: i686-pc-windows-gnu
        #     use-cross: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
#       - name: Cache
#         uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --target ${{ matrix.target }} --release --locked --verbose
      - name: Move
        run: mv target/${{ matrix.target }}/release/geph4-client.exe ./
      - name: Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: geph4-client.exe
      - name: Package
        run: 7z a geph4-client-${{ matrix.target }}.zip geph4-client.exe
      - name: Get tag
        id: tag
        uses: JinoArch/get-latest-tag@latest
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.latestTag }}
          files: geph4-client-${{ matrix.target }}.zip

  build-linux:
    name: build-linux-${{ matrix.target }}
    runs-on: ubuntu-latest
    if: ${{ inputs.target == matrix.target ||
      inputs.target == null }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - aarch64-linux-android
        include:
          - target: aarch64-unknown-linux-musl
            use-cross: true
          - target: aarch64-linux-android
            use-cross: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install cross
        if: matrix.use-cross == true
        uses: taiki-e/install-action@cross
#       - name: Cache
#         uses: Swatinem/rust-cache@v1
#       - name: Set Android NDK linker path [Android (aarch64)]
#         if: ${{ matrix.target == 'aarch64-linux-android' }}
#         run: echo "$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
      - name: Install musl-gcc
        if: matrix.target == 'x86_64-unknown-linux-musl' ||
          matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt install musl-tools
          # sudo apt install libssl-dev pkg-config
          # export RUSTFLAGS="-C link-arg=-lgcc -Clink-arg=-static-libgcc"
      - name: Build
        if: matrix.use-cross == false
        run: cargo build --target ${{ matrix.target }} --release --locked --verbose
      - name: Build cross
        if: matrix.use-cross == true
        run: cross build --target ${{ matrix.target }} --release --locked --verbose
      - name: Move
        run: mv target/${{ matrix.target }}/release/geph4-client ./
      - name: Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: geph4-client
      - name: Package
        run: tar -czvf geph4-client-${{ matrix.target }}.tar.gz geph4-client
      - name: Get tag
        id: tag
        uses: JinoArch/get-latest-tag@latest
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.latestTag }}
          files: geph4-client-${{ matrix.target }}.tar.gz
