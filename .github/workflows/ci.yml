name: CI

on:
  push:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      skip_cache:
        description: "Skip Cache"
        required: false
        default: true
        type: boolean
      skip_sync:
        description: "Skip Sync"
        required: false
        default: true
        type: boolean
      skip_build_windows:
        description: "Skip Build Windows"
        required: false
        default: false
        type: boolean
      skip_build_linux:
        description: "Skip Build Linux"
        required: false
        default: false
        type: boolean
      skip_build_android:
        description: "Skip Build Android"
        required: false
        default: false
        type: boolean
      reset_head:
        description: "Reset to Head"
        required: false
        type: string
env:
  CARGO_TERM_COLOR: always

jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    if: inputs.skip_sync != true
    env:
      bin: geph4-client
      upstream: geph-official/geph4-client
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: Sync
        run: |
          git remote add upstream https://github.com/$upstream.git
          git fetch upstream
          git reset --hard $(git log --all --pretty=format:'%H' -n 1)
          git push -f
          git push --tags -f

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    if: inputs.skip_build_windows != true
    strategy:
      matrix:
        target:
          - i686-pc-windows-msvc
    env:
      bin: geph4-client.exe
      upstream: geph-official/geph4-client
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
      - name: Reset Latest Tag
        run: git reset --hard $(git rev-list --all --max-count=1)
      - name: Reset to Input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}
      - name: Get Version
        shell: bash
        run: |
          date=$(date -I)
          hash=$(git log --pretty=format:%h -n 1 --all)
          full_hash=$(git log --pretty=format:%H -n 1 --all)
          tag_name=$(git describe --tags)
          echo "hash=$hash" >> $GITHUB_ENV
          echo "full_hash=$full_hash" >> $GITHUB_ENV
          echo "date=$date" >> $GITHUB_ENV
          echo "tag_name=$tag_name" >> $GITHUB_ENV
      # - name: Download 64 Bit WinDivert
      #   uses: robinraju/release-downloader@v1.7
      #   with:
      #     repository: basil00/Divert
      #     latest: true
      #     fileName: WinDivert*A*.zip
      - name: Use 64 Bit WinDivert
        shell: bash
        run: |
          wget https://github.com/basil00/Divert/releases/download/v2.2.2/WinDivert-2.2.2-A.zip
          unzip WinDivert-2.2.2-A.zip
          ls -lha WinDivert*/**
          pwd
          ls -lha
      # - name: Cache Rust
      #   if: inputs.skip_cache != true
      #   uses: Swatinem/rust-cache@v1
      - name: Build Binary
        run: cargo build --target ${{ matrix.target }} --release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}
      - name: Compression
        working-directory: target/${{ matrix.target }}/release
        run: |
          7z a ${{ env.bin }}-${{ matrix.target }}.7z ${{ env.bin }}
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.tag_name }}
          tag_name: ${{ env.tag_name }}
          target_commitish: ${{ env.full_hash }}
          files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}.7z

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    if: inputs.skip_build_linux != true
    strategy:
      matrix:
        target:
          # - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
    env:
      bin: geph4-client
      upstream: geph-official/geph4-client
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
      - name: Reset Latest Tag
        run: git reset --hard $(git rev-list --all --max-count=1)
      - name: Reset to Input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}
      - name: Get version
        shell: bash
        run: |
          date=$(date -I)
          hash=$(git log --pretty=format:%h -n 1 --all)
          full_hash=$(git log --pretty=format:%H -n 1 --all)
          tag_name=$(git describe --tags)
          echo "hash=$hash" >> $GITHUB_ENV
          echo "full_hash=$full_hash" >> $GITHUB_ENV
          echo "date=$date" >> $GITHUB_ENV
          echo "tag_name=$tag_name" >> $GITHUB_ENV
      # - name: Add Musl Tools
      #   run: |
      #     sudo apt install musl-tools
      - name: Install Cross
        uses: taiki-e/install-action@cross
      # - name: Cache Rust
      #   if: inputs.skip_cache != true
      #   uses: Swatinem/rust-cache@v1
      - name: Build Binary
        run: |
          cross build --target ${{ matrix.target }} --release --locked
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}
      - name: Compression
        working-directory: target/${{ matrix.target }}/release
        run: |
          7z a ${{ env.bin }}-${{ matrix.target }}.7z ${{ env.bin }}
      - name: Get tag
        run: echo "tag=$(git describe --tags)" >> $GITHUB_ENV
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.tag_name }}
          tag_name: ${{ env.tag_name }}
          target_commitish: ${{ env.full_hash }}
          files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}.7z

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    if: inputs.skip_build_android != true
    strategy:
      matrix:
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi
    env:
      bin: geph4-client
      upstream: geph-official/geph4-client
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
      - name: Reset Latest Tag
        run: git reset --hard $(git rev-list --all --max-count=1)
      - name: Reset to Input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}
      - name: Get version
        shell: bash
        run: |
          date=$(date -I)
          hash=$(git log --pretty=format:%h -n 1 --all)
          full_hash=$(git log --pretty=format:%H -n 1 --all)
          tag_name=$(git describe --tags)
          echo "date=$date" >> $GITHUB_ENV
          echo "hash=$hash" >> $GITHUB_ENV
          echo "full_hash=$full_hash" >> $GITHUB_ENV
          echo "tag_name=$tag_name" >> $GITHUB_ENV
      - name: Install Cross
        uses: taiki-e/install-action@cross
      # - name: Cache Rust
      #   if: inputs.skip_cache != true
      #   uses: Swatinem/rust-cache@v1
      - name: Cache Docker Images
        if: inputs.skip_cache != true
        uses: ScribeMD/docker-cache@0.2.7
        id: cache-docker
        with:
          key: cross-${{ matrix.target }}-${{ hashFiles('cross-setup.sh') }}
      - name: Build docker
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          # sh cross-setup.sh
          git clone --recursive https://github.com/cross-rs/cross.git
          cd cross
          cargo build-docker-image ${{ matrix.target }} \
            --build-arg ANDROID_NDK=r25b \
            --build-arg ANDROID_SDK=21 \
            --build-arg ANDROID_VERSION=5.0.0_r1 \
            --tag local
          # docker tag ghcr.io/cross-rs/${{ matrix.target }}:build ghcr.io/cross-rs/${{ matrix.target }}:local
      # - name: install cargo-ndk
      #   run: cargo install cargo-ndk
      - name: Build Binary
        run: |
          # cargo ndk -t arm64-v8a build --release
          cross build --target ${{ matrix.target }} --release --locked
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}
      - name: Compression
        working-directory: target/${{ matrix.target }}/release
        run: |
          7z a ${{ env.bin }}-${{ matrix.target }}.7z ${{ env.bin }}
      - name: Get tag
        run: echo "tag=$(git describe --tags)" >> $GITHUB_ENV
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.tag_name }}
          tag_name: ${{ env.tag_name }}
          target_commitish: ${{ env.full_hash }}
          files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}.7z
