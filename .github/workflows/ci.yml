name: CI

on:
  push:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      skip_build_windows:
        description: "Skip Build Windows"
        required: false
        default: false
        type: boolean
      skip_build_linux:
        description: "Skip Build Linux"
        required: false
        default: false
        type: boolean
      skip_build_android:
        description: "Skip Build Android"
        required: false
        default: false
        type: boolean
      skip_release:
        description: "Skip Release"
        required: false
        default: false
        type: boolean
      reset_head:
        description: "Reset to Head"
        required: false
        type: string
env:
  upstream: geph-official/geph4-client
  bin: geph4-client

jobs:
  common:
    name: common
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      date: ${{ steps.getenv.outputs.date }}
      hash: ${{ steps.getenv.outputs.hash }}
      full_hash: ${{ steps.getenv.outputs.full_hash }}
      tag_name: ${{ steps.getenv.outputs.tag_name }}
    steps:
      - name: Checkout
        if: ${{ !inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
      - name: Checkout
        if: ${{ inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
          ref: ${{ inputs.reset_head }}
      # - name: Reset to input HEAD
      #   if: inputs.reset_head != null
      #   run: git reset --hard ${{ inputs.reset_head }}
      - name: Get environment variable
        id: getenv
        shell: bash
        run: |
          echo "date=$(date -I)" >> "${GITHUB_OUTPUT}"
          echo "hash=$(git log --pretty=format:%h -n 1)" >> "${GITHUB_OUTPUT}"
          echo "full_hash=$(git log --pretty=format:%H -n 1)" >> "${GITHUB_OUTPUT}"
          echo "tag_name=$(git describe --tags)" >> "${GITHUB_OUTPUT}"
          echo "date=$(date -I)"
          echo "hash=$(git log --pretty=format:%h -n 1)"
          echo "full_hash=$(git log --pretty=format:%H -n 1)"
          echo "tag_name=$(git describe --tags)"
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          gh release -R ${{ github.repository }} create $(git describe --tags) --generate-notes --target $(git log --pretty=format:%H -n 1) ||
          gh release -R ${{ github.repository }} create $(git describe --tags) --generate-notes
          

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      full_hash: ${{ needs.common.outputs.full_hash }}
      tag_name: ${{ needs.common.outputs.tag_name }}
    if: inputs.skip_build_windows != true
    needs: common
    strategy:
      matrix:
        target:
          - i686-pc-windows-msvc
          - x86_64-pc-windows-msvc
    steps:
      - name: Checkout
        if: ${{ !inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-tags: true
      - name: Checkout
        if: ${{ inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          ref: ${{ inputs.reset_head }}
          fetch-tags: true
      - name: Use 64-bit WinDivert
        if: matrix.target == 'x86_64-pc-windows-msvc'
        shell: bash
        run: |
          curl -OL https://github.com/basil00/Divert/releases/download/v2.2.2/WinDivert-2.2.2-A.zip
          unzip WinDivert-2.2.2-A.zip
          rm windows-lib/*
          cp WinDivert-2.2.2-A/x64/* windows-lib/
      - name: Build binary
        run: cargo build --target ${{ matrix.target }} --release
      - name: Rename
        shell: bash
        run: |
          mkdir build
          cp target/${{ matrix.target }}/release/${{ env.bin }}.exe build
          cd build
          cp ${{ env.bin }}.exe ${{ env.bin }}-${{ matrix.target }}.exe
          7z a ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.zip ${{ env.bin }}.exe
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}
          path: build/${{ env.bin }}.exe
      - name: Release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release -R ${{ github.repository }} upload ${{ env.tag_name }} --clobber build/${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.zip
          gh release -R ${{ github.repository }} upload daily --clobber build/${{ env.bin }}-${{ matrix.target }}.exe

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      full_hash: ${{ needs.common.outputs.full_hash }}
      tag_name: ${{ needs.common.outputs.tag_name }}
    if: inputs.skip_build_linux != true
    needs: common
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
    steps:
      - name: Checkout
        if: ${{ !inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
      - name: Checkout
        if: ${{ inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          ref: ${{ inputs.reset_head }}
      - name: Install Cross
        uses: taiki-e/install-action@cross
      - name: Build binary
        run: cross build --target ${{ matrix.target }} --release --locked
      - name: Rename
        run: |
          mkdir build
          cp target/${{ matrix.target }}/release/${{ env.bin }} build
          cd build
          cp ${{ env.bin }} ${{ env.bin }}-${{ matrix.target }}
          tar -cvaf ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.tar.gz ${{ env.bin }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}
          path: build/${{ env.bin }}
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release -R ${{ github.repository }} upload ${{ env.tag_name }} --clobber build/${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.tar.gz
          gh release -R ${{ github.repository }} upload daily --clobber build/${{ env.bin }}-${{ matrix.target }}

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    if: inputs.skip_build_android != true
    needs: common
    strategy:
      matrix:
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0
      - name: Reset to input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Add Android targets
        run: |
          rustup target add armv7-linux-androideabi
          rustup target add aarch64-linux-android
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b
      - name: Install cargo-ndk
        run: cargo install cargo-ndk
      - name: Build for armv7-linux-androideabi
        run: |
          cargo ndk -t armeabi-v7a -p 21 build --release
      - name: Build for aarch64-linux-android
        run: |
          cargo ndk -t arm64-v8a -p 21 build --release
      - name: Rename
        run: |
          mkdir build
          cp target/${{ matrix.target }}/release/${{ env.bin }} build
          cd build
          cp ${{ env.bin }} ${{ env.bin }}-${{ matrix.target }}
          tar -cvaf ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.tar.gz ${{ env.bin }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}
          path: build/${{ env.bin }}
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release -R ${{ github.repository }} upload ${{ env.tag_name }} --clobber build/${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.tar.gz
          gh release -R ${{ github.repository }} upload daily --clobber build/${{ env.bin }}-${{ matrix.target }}


  upload-release:
    name: Upload file
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: false
    # if: |
    #   needs.build-windows.result == 'success' ||
    #   needs.build-linux.result == 'success' ||
    #   # needs.build-android.result == 'success'
    needs:
      - common
      - build-windows
      - build-linux
    env:
      full_hash: ${{ needs.common.outputs.full_hash }}
      tag_name: ${{ needs.common.outputs.tag_name }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
      - name: Compresse and rename
        run: |
          mkdir release
          for file in ${{ env.bin }}*/*; do
              dirname=$(dirname "${file}")
              if [[ "${file}" == *"windows"* ]]; then
                  7z a "release/${dirname}.zip" "${file}"
              else
                  tar -vcaf "release/${dirname}.tar.gz" "${file}"
              fi
          done
