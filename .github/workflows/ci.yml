name: CI

on:
  push:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      skip_sync:
        description: "Skip Sync"
        required: false
        default: true
        type: boolean
      skip_build_windows:
        description: "Skip Build Windows"
        required: false
        default: false
        type: boolean
      skip_build_linux:
        description: "Skip Build Linux"
        required: false
        default: false
        type: boolean
      skip_build_android:
        description: "Skip Build Android"
        required: false
        default: false
        type: boolean
      reset_head:
        description: "Reset to Head"
        required: false
        type: string
env:
  CARGO_TERM_COLOR: always
  upstream: geph-official/geph4-client

jobs:
  common:
    name: common
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.getenv.outputs.date }}
      hash: ${{ steps.getenv.outputs.hash }}
      full_hash: ${{ steps.getenv.outputs.full_hash }}
      tag_name: ${{ steps.getenv.outputs.tag_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0

      - name: Reset to Input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}

      - name: Get environment variable
        id: getenv
        shell: bash
        run: |
          echo "date=$(date -I)" >> "$GITHUB_OUTPUT"
          echo "hash=$(git log --pretty=format:%h -n 1)" >> "$GITHUB_OUTPUT"
          echo "full_hash=$(git log --pretty=format:%H -n 1)" >> "$GITHUB_OUTPUT"
          echo "tag_name=$(git describe --tags)" >> "$GITHUB_OUTPUT"

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: common
    if: inputs.skip_build_windows != true
    strategy:
      matrix:
        target:
          - i686-pc-windows-msvc
          - x86_64-pc-windows-msvc
    env:
      bin: geph4-client.exe
      date: ${{ needs.common.outputs.date }}
      hash: ${{ needs.common.outputs.hash }}
      full_hash: ${{ needs.common.outputs.full_hash }}
      tag_name: ${{ needs.common.outputs.tag_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Reset to Input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}

      - name: Use 64-bit WinDivert
        if: matrix.target == 'x86_64-pc-windows-msvc'
        shell: bash
        run: |
          curl -OL https://github.com/basil00/Divert/releases/download/v2.2.2/WinDivert-2.2.2-A.zip
          unzip WinDivert-2.2.2-A.zip
          rm windows-lib/*
          cp WinDivert-2.2.2-A/x64/* windows-lib/
      - name: Build binary
        run: cargo build --target ${{ matrix.target }} --release

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}

      # - name: Compression
      #   working-directory: target/${{ matrix.target }}/release
      #   run: 7z a ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.7z ${{ env.bin }}
      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: ${{ env.tag_name }}
      #     tag_name: ${{ env.tag_name }}
      #     target_commitish: ${{ env.full_hash }}
      #     files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.7z

      # - name: Naming
      #   working-directory: target/${{ matrix.target }}/release
      #   run: cp ${{ env.bin }} ${{ env.bin }}-${{ matrix.target }}.exe
      # - name: Release daily
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     prerelease: true
      #     name: daily
      #     tag_name: daily
      #     target_commitish: ${{ env.full_hash }}
      #     files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}.exe

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: common
    if: inputs.skip_build_linux != true
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - aarch64-unknown-linux-musl
    env:
      bin: geph4-client
      date: ${{ needs.common.outputs.date }}
      hash: ${{ needs.common.outputs.hash }}
      full_hash: ${{ needs.common.outputs.full_hash }}
      tag_name: ${{ needs.common.outputs.tag_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Reset to Input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}

      - name: Install Cross
        uses: taiki-e/install-action@cross
      - name: Build binary
        run: cross build --target ${{ matrix.target }} --release --locked

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}

      # - name: Compression
      #   working-directory: target/${{ matrix.target }}/release
      #   run: tar -vcaf ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.tar.xz ${{ env.bin }}
      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: ${{ env.tag_name }}
      #     tag_name: ${{ env.tag_name }}
      #     target_commitish: ${{ env.full_hash }}
      #     files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.tar.xz

      # - name: Naming
      #   working-directory: target/${{ matrix.target }}/release
      #   run: cp ${{ env.bin }} ${{ env.bin }}-${{ matrix.target }}
      # - name: Release daily
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     prerelease: true
      #     name: daily
      #     tag_name: daily
      #     target_commitish: ${{ env.full_hash }}
      #     files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: common
    if: inputs.skip_build_android != true
    strategy:
      matrix:
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi
    env:
      bin: geph4-client
      date: ${{ needs.common.outputs.date }}
      hash: ${{ needs.common.outputs.hash }}
      full_hash: ${{ needs.common.outputs.full_hash }}
      tag_name: ${{ needs.common.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Reset to Input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}

      - name: Install Cross
        uses: taiki-e/install-action@cross
      - name: Cache Docker Images
        if: inputs.skip_cache != true
        uses: ScribeMD/docker-cache@0.2.7
        id: cache-docker
        with:
          key: cross-${{ matrix.target }}-${{ hashFiles('cross-setup.sh') }}
      - name: Build docker
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          # sh cross-setup.sh
          git clone --recursive https://github.com/cross-rs/cross.git
          cd cross
          cargo build-docker-image ${{ matrix.target }} \
            --build-arg ANDROID_NDK=r25b \
            --build-arg ANDROID_SDK=21 \
            --build-arg ANDROID_VERSION=5.0.0_r1 \
            --tag local
          # docker tag ghcr.io/cross-rs/${{ matrix.target }}:build ghcr.io/cross-rs/${{ matrix.target }}:local
      - name: Build binary
        run: cross build --target ${{ matrix.target }} --release --locked

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}

      # - name: Compression
      #   working-directory: target/${{ matrix.target }}/release
      #   run: tar -vcaf ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.tar.xz ${{ env.bin }}
      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: ${{ env.tag_name }}
      #     tag_name: ${{ env.tag_name }}
      #     target_commitish: ${{ env.full_hash }}
      #     files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}.tar.xz

      # - name: Naming
      #   working-directory: target/${{ matrix.target }}/release
      #   run: cp ${{ env.bin }} ${{ env.bin }}-${{ matrix.target }}
      # - name: Release daily
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     prerelease: true
      #     name: daily
      #     tag_name: daily
      #     target_commitish: ${{ env.full_hash }}
      #     files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}

  upload-release:
    name: Upload file
    runs-on: ubuntu-latest
    needs:
      - common
      - build-windows
      - build-linux
      - build-android
    env:
      bin: geph4-client
      date: ${{ needs.common.outputs.date }}
      hash: ${{ needs.common.outputs.hash }}
      full_hash: ${{ needs.common.outputs.full_hash }}
      tag_name: ${{ needs.common.outputs.tag_name }}
    steps:
      - run: ls