name: CI

on:
  push:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      skip_sync:
        description: "Skip sync"
        required: false
        default: true
        type: boolean
      skip-build-windows:
        description: "Skip build Windows"
        required: false
        default: false
        type: boolean
      skip-build-linux:
        description: "Skip build Linux"
        required: false
        default: false
        type: boolean
      skip-build-android:
        description: "Skip build Android"
        required: false
        default: false
        type: boolean
      reset_hash:
        description: "Reset to hash"
        required: false
        type: string
env:
  CARGO_TERM_COLOR: always

jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    if: inputs.skip_sync != true
    env:
      bin: geph4-client
      upstream: geph-official/geph4-client
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: Sync
        run: |
          git remote add upstream https://github.com/$upstream.git
          git fetch upstream
          git reset --hard $(git log --all --pretty=format:'%H' -n 1)
          git push -f
          git push --tags -f

  build-windows:
    name: build-windows
    runs-on: windows-latest
    if: inputs.skip-build-windows != true
    strategy:
      matrix:
        target:
          - i686-pc-windows-msvc
    env:
      bin: geph4-client.exe
      upstream: geph-official/geph4-client
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
      - name: Reset latest tag
        run: git reset --hard $(git rev-list --all --max-count=1)
      - name: Reset to input ref
        if: inputs.reset_hash != null
        run: git reset --hard ${{ inputs.reset_hash }}
      - name: Get version
        shell: bash
        run: |
          date=$(date -I)
          hash=$(git log --pretty=format:%h -n 1 --all)
          tag_name=$(git describe --tags)
          echo "hash=$hash" >> $GITHUB_ENV
          echo "date=$date" >> $GITHUB_ENV
          echo "tag_name=$tag_name" >> $GITHUB_ENV
      - name: Cache
        uses: Swatinem/rust-cache@v1
      - name: build
        run: cargo build --target ${{ matrix.target }} --release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}
      - name: Compression
        working-directory: target/${{ matrix.target }}/release
        run: |
          7z a ${{ env.bin }}-${{ matrix.target }}.7z ${{ env.bin }}
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.tag_name }}
          files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}.7z

  build-linux:
    name: build-linux
    runs-on: ubuntu-latest
    if: inputs.skip-build-linux != true
    strategy:
      matrix:
        target:
          # - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          # - aarch64-linux-android
    env:
      bin: geph4-client
      upstream: geph-official/geph4-client
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
      - name: Reset latest tag
        run: git reset --hard $(git rev-list --all --max-count=1)
      - name: Reset to input ref
        if: inputs.reset_hash != null
        run: git reset --hard ${{ inputs.reset_hash }}
      - name: Get version
        shell: bash
        run: |
          date=$(date -I)
          hash=$(git log --pretty=format:%h -n 1 --all)
          tag_name=$(git describe --tags)
          echo "hash=$hash" >> $GITHUB_ENV
          echo "date=$date" >> $GITHUB_ENV
          echo "tag_name=$tag_name" >> $GITHUB_ENV
      - name: Install cross
        uses: taiki-e/install-action@cross
      - name: Cache
        uses: Swatinem/rust-cache@v1
      - name: build
        run: |
          cross build --target ${{ matrix.target }} --release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}
      - name: Compression
        working-directory: target/${{ matrix.target }}/release
        run: |
          7z a ${{ env.bin }}-${{ matrix.target }}.7z ${{ env.bin }}
      - name: Get tag
        run: echo "tag=$(git describe --tags)" >> $GITHUB_ENV
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.tag }}
          files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}.7z

  build-android:
    name: build-android
    runs-on: ubuntu-latest
    if: inputs.skip-build-android != true
    strategy:
      matrix:
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi
    env:
      bin: geph4-client
      upstream: geph-official/geph4-client
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
      - name: Reset latest tag
        run: git reset --hard $(git rev-list --all --max-count=1)
      - name: Reset to input ref
        if: inputs.reset_hash != null
        run: git reset --hard ${{ inputs.reset_hash }}
      - name: Get version
        shell: bash
        run: |
          date=$(date -I)
          hash=$(git log --pretty=format:%h -n 1 --all)
          tag_name=$(git describe --tags)
          echo "hash=$hash" >> $GITHUB_ENV
          echo "date=$date" >> $GITHUB_ENV
          echo "tag_name=$tag_name" >> $GITHUB_ENV
      - name: Install cross
        uses: taiki-e/install-action@cross
      - name: Cache
        uses: Swatinem/rust-cache@v1
      - name: Cache Docker images.
        uses: ScribeMD/docker-cache@0.2.7
        id: cache-docker
        with:
          key: cross-${{ matrix.target }}-${{ hashFiles('cross-setup.sh') }}
      - name: build docker
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          # sh cross-setup.sh
          git clone --recursive https://github.com/cross-rs/cross.git
          cd cross
          cargo build-docker-image ${{ matrix.target }} \
            --build-arg ANDROID_NDK=r25b \
            --build-arg ANDROID_SDK=21 \
            --build-arg ANDROID_VERSION=5.0.0_r1 \
            --tag local
          # docker tag ghcr.io/cross-rs/${{ matrix.target }}:build ghcr.io/cross-rs/${{ matrix.target }}:local
      # - name: install cargo-ndk
      #   run: cargo install cargo-ndk
      - name: build
        run: |
          # cargo ndk -t arm64-v8a build --release
          cross build --target ${{ matrix.target }} --release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.bin }}-${{ matrix.target }}-${{ env.tag_name }}
          path: target/${{ matrix.target }}/release/${{ env.bin }}
      - name: Compression
        working-directory: target/${{ matrix.target }}/release
        run: |
          7z a ${{ env.bin }}-${{ matrix.target }}.7z ${{ env.bin }}
      - name: Get tag
        run: echo "tag=$(git describe --tags)" >> $GITHUB_ENV
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.tag_name }}-${{ env.date }}
          tag_name: ${{ env.tag_name }}
          target_commitish: ${{ env.hash }}
          files: target/${{ matrix.target }}/release/${{ env.bin }}-${{ matrix.target }}.7z
