name: CI

on:
  schedule:
    - cron: "0 6 * * 3"
  workflow_dispatch:
    inputs:
#       skip_sync:
#         description: "Skip sync"
#         required: false
#         default: true
#         type: boolean
      skip_build:
        description: "Skip build"
        required: false
        default: false
        type: boolean
      reset_sha:
        description: "Reset to sha"
        required: false
        type: string
env:
  CARGO_TERM_COLOR: always

jobs:
#   sync:
#     name: Sync
#     runs-on: ubuntu-latest
#     if: inputs.skip_sync != true
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           ref: master
#       - name: Sync
#         env:
#           upstream_repo: geph-official/geph4-client
#         run: |
#           git remote add upstream https://github.com/$upstream_repo.git
#           git fetch upstream
#           hash=$(git log --all --pretty=format:'%H' -n 1)
#           git reset --hard $hash
#           git push
#           git push --tags

#   build-windows:
#     name: build-windows-${{ matrix.target }}
#     runs-on: windows-latest
#     if: inputs.skip_build != true
#     strategy:
#       matrix:
#         target:
#           - i686-pc-windows-msvc
#         # include:
#         #   - target: i686-pc-windows-gnu
#         #     use-cross: true
#     steps:
#       - name: Checkout
#         if: inputs.ref == null
#         uses: actions/checkout@v3
#         with:
#           repository: geph-official/geph4-client
#           ref: master
#       - name: Checkout custom
#         if: inputs.ref != null
#         uses: actions/checkout@v3
#         with:
#           repository: geph-official/geph4-client
#           ref: ${{ inputs.ref}}
#       - name: Install Rust
#         uses: dtolnay/rust-toolchain@stable
#         with:
#           targets: ${{ matrix.target }}
# #       - name: Cache
# #         uses: Swatinem/rust-cache@v1
#       - name: Build
#         run: cargo build --target ${{ matrix.target }} --release --locked
#       - name: Move
#         run: mv target/${{ matrix.target }}/release/geph4-client.exe ./
#       - name: Artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: ${{ matrix.target }}
#           path: geph4-client.exe
#       - name: Package
#         run: 7z a geph4-client-${{ matrix.target }}.7z geph4-client.exe
#       - name: Get tag
#         id: tag
#         uses: JinoArch/get-latest-tag@latest
#       - name: Releases
#         uses: softprops/action-gh-release@v1
#         with:
#           tag_name: ${{ steps.tag.outputs.latestTag }}
#           files: geph4-client-${{ matrix.target }}.7z

  build-linux:
    name: build-linux-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    if: inputs.skip_build != true
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
#          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - aarch64-linux-android
        os:
          - ubuntu-latest
        bin:
          - geph4-client
        include:
          - target: aarch64-unknown-linux-musl
            use-cross: true
          - target: aarch64-linux-android
            use-cross: true
          - target: i686-pc-windows-msvc
            os: windows-latest
            bin: geph4-client.exe
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: geph-official/geph4-client
          fetch-depth: 0
      - name: Reset latest tag
        run: git reset --hard $(git rev-list --all --max-count=1)
      - name: Reset to input ref
        if: inputs.reset_sha != null
        run: git reset --hard ${{ inputs.reset_sha }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install cross
        if: matrix.use-cross == true
        uses: taiki-e/install-action@cross
#       - name: Cache
#         uses: Swatinem/rust-cache@v1
      - name: Install musl-gcc
        if: |
          matrix.target == 'x86_64-unknown-linux-musl' ||
          matrix.target == 'aarch64-unknown-linux-musl'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: musl-tools
          version: 1.0
      - name: Cargo build
        if: matrix.use-cross != true
        run: cargo build --target ${{ matrix.target }} --release --locked
      - name: Cross build
        if: matrix.use-cross == true
        run: cross build --target ${{ matrix.target }} --release --locked
      - name: Move
        run: mv target/${{ matrix.target }}/release/${{ matrix.bin }} ./
      - name: Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.bin }}
      - name: Package
        run: 7z a geph4-client-${{ matrix.target }}.7z ${{ matrix.bin }}
      - name: Get tag
        shell: bash
        run: echo "tag=$(git describe --tags)" >> $GITHUB_ENV
      - name: Releases
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.tag }}
          files: geph4-client-${{ matrix.target }}.7z
